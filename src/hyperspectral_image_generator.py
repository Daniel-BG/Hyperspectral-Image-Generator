#level.
# setBlock(x,y,z,id)
# setBlockDataAt(x,y,z,data)
# setBlock(x,y,z,id,data)
# blockAt(x, y, z)
# blockDataAt(x, y, z)
import numpy
import time
import math
from array import array

# opciones del programa
displayName = "Hyperspectral image generator"
inputs = (
  ("Number of bands", (10, 1, 300)),  #Integer input, default: 10, min: 1, max: 300.
  ("Wavelength minimum", 410),
  ("Wavelength maximum", 2500),
  ("Output file", "string"),
  ("Sample every n blocks", (1,1,256)),
  ("Merge every n samples", (1,1,256)),
  ("Hyperspectral Image Generator", "label"),
)

class Constants:
	VERSION = "Hyperspectral_Image_Generator V0.1"
	LIGHT_THRESHOLD = 0.0001
	
	
CONST = Constants()

class Material:
	# transparency: how much light lets through
	# signature: array of reflectancies
	# startWaveLength: wavelength of the first reflectancie (in nm)
	# stepWaveLength: increment of wavelength from one reflectancie to the next
	#	this means that reflectancies in signature are spaced evenly according
	#	to wavelength difference
	def __init__(self,transparency,startWaveLength,stepWaveLength,signature):
		self.transparency = transparency
		self.startWaveLength = startWaveLength
		self.stepWaveLength = stepWaveLength
		self.signature = signature
	# get the reflectancie for a specified wavelenght. if the exact value is not
	# in the signature but inside it, an interpolation is performed to estimate it
	# if the value lies outside the signature, 0 is returned
	def get_reflectancie(self,wavelength):
		index = int((wavelength-self.startWaveLength) / self.stepWaveLength)
		# return 0 if index lies out of bounds
		if index < 0 or index >= len(self.signature):
			return 0
		return self.signature[index]
		#more precise but expensive version
			#return last value if index is maxed out
			#if index == len(self.signature) - 1:
			#	return self.signature[index]
			# interpolate linearly the two closest values otherwise
			#difference = (wavelength - (self.startWaveLength + self.stepWaveLength*index))/self.stepWaveLength
			#return self.signature[index] * difference + self.signature[index+1] * (1-difference)
		
#https://stackoverflow.com/questions/5849800/tic-toc-functions-analog-in-python
class Timer(object):
    def __init__(self, name=None):
        self.name = name

    def __enter__(self):
        self.tstart = time.time()

    def __exit__(self, type, value, traceback):
        if self.name:
            print '[%s]' % self.name,
        print 'Elapsed: %s' % (time.time() - self.tstart)
		
# From SethBling's StructureDeleter filter
# http://youtube.com/SethBling
########## Fast data access ##########
from pymclevel import ChunkNotPresent
GlobalChunkCache = {}
GlobalLevel = None

def getChunk(x, z):
	global GlobalChunkCache
	global GlobalLevel
	chunkCoords = (x>>4, z>>4)
	if chunkCoords not in GlobalChunkCache:
		try:
			GlobalChunkCache[chunkCoords] = GlobalLevel.getChunk(x>>4, z>>4)
		except ChunkNotPresent:
			return None
	return GlobalChunkCache[chunkCoords]
	
def blockAndDataAt(x,y,z):
	chunk = getChunk(x, z)
	if chunk == None:
		return 0
	return (chunk.Blocks[x%16][z%16][y], chunk.Data[x%16][z%16][y])
		
########## End fast data access ##########
		
def getDictId(block,data):
	return block + (data << 8)
				

def perform(level, box, options):
	filename = options["Output file"] + ".bsq"
	bands = options["Number of bands"]
	min_wav = options["Wavelength minimum"]
	max_wav = options["Wavelength maximum"]
	sample_step = options["Sample every n blocks"]
	merge_freq = options["Merge every n samples"]
	wav_step = (max_wav - min_wav) / bands
	global GlobalLevel
	GlobalLevel = level
	
	# intervals. Width and depth are rounded up to the nearest integer
	width = (box.maxx - box.minx + sample_step - 1)//sample_step
	depth = (box.maxz - box.minz + sample_step - 1)//sample_step
	
	# matrix which will contain the spectrum
	# specMatrix = [[[]]]
	# specMatrix = [[[0 for y in xrange(bands)] for z in xrange(depth)] for x in xrange(width)]
	specMatrix = numpy.zeros(shape=(bands,width,depth),dtype=numpy.dtype('f4'))
	# dictionary of spectrums
	materialDict = materials()
	
	# try to open the file before calculating the matrix just in case
	# the file cannot be opened afterwards and the calculations are lost
	file = open(filename, 'wb')
	file.truncate()
	
	# xrange returns values as needed instead of creating them all at once
	# loop on all selected coordinates
	
	with Timer('Processing time'):
		for x in xrange(box.minx,box.maxx,sample_step):
			for z in xrange(box.minz,box.maxz,sample_step):
				# light will be used to average values of the spectrum
				# of all visible objects within a column
				columnLight = 1.0
				# loop from top to bottom (direction of light)
				# when looping backwards substract 1 to the interval
				for y in xrange(box.maxy-1,box.miny-1, -1):
					(block,data) = blockAndDataAt(x,y,z)
					#block = level.blockAt(x,y,z)
					#data  = level.blockDataAt(x,y,z)
					# 8 bits per block and 4 per data
					type  = getDictId(block,data)
					# if we don't have a spectrum for the current material, 
					# ignore it and go to next
					if type not in materialDict:
						continue
					# get current material for block type
					currentMaterial = materialDict[type]
					# get light output of current material and update light to the next
					currentLight = columnLight * (1.0 - currentMaterial.transparency)
					columnLight *= currentMaterial.transparency
					# precalc index access
					cx = (x-box.minx)//sample_step
					cz = (z-box.minz)//sample_step
					for k in xrange(bands):
						# get current wavelength
						currentWav = min_wav + wav_step*k
						# update wavelenght on spectral matrix
						specMatrix[k][cx][cz] += currentLight*currentMaterial.get_reflectancie(currentWav)
					# if there is a non significant amount of light left, continue onto next pixel
					if columnLight < CONST.LIGHT_THRESHOLD:
						continue
		
		# interpolate neighbours to reduce image size if desired
		if merge_freq > 1:
			specMatrix_temp = numpy.zeros(shape=(bands,
												(width+merge_freq-1)//merge_freq,
												(depth+merge_freq-1)//merge_freq),
										  dtype=numpy.dtype('f4'))
			# precalculate linear interpolation factor to speed up computation
			merge_factor = 1.0/(merge_freq*merge_freq)
			for x in xrange(width):
				for z in xrange(depth):
					for k in xrange(bands):
						specMatrix_temp[k][x//merge_freq][z//merge_freq] += merge_factor*specMatrix[k][x][z]
			specMatrix = specMatrix_temp
			# save new values to file
			width = (width+merge_freq-1)//merge_freq
			depth = (depth+merge_freq-1)//merge_freq
	
	# write data file
	specMatrix.tofile(file)
	file.close()
	
	# now write the header file
	filename = options["Output file"] + ".hdr"
	file = open(filename, 'w')
	file.truncate()
	file.write("ENVI\ndescription = {Generated using "+ CONST.VERSION + "}\n")
	file.write("samples = " + str(depth) + "\n")
	file.write("lines = " + str(width) + "\n")
	file.write("bands = " + str(bands) + "\n")
	file.write("data type = 4\n")
	file.write("interleave = bsq")
	file.close()
	
	
	
					
# returns a dictionary pairing block types with their spectrums
# transparency,startWaveLength,stepWaveLength,signature)
def materials():
	p = {}
	#air: don't include transparent materials since they don't affect the output BUT do slow down operations
	#p[0] = Material(1.0,0,0,[])
	#granite
	p[1+(1<<8)] = Material(0.0,410,10,[0.6166064036,0.6447537447,0.648745672,0.6581841002,0.6883377865,0.7252115547,0.744058559,0.7581610998,0.7711068038,0.7846267097,0.7976684448,0.8128790189,0.829829586,0.8413062099,0.8496880956,0.8596583149,0.8681411242,0.8737107797,0.8770812153,0.8779178479,0.8779763132,0.8789174312,0.8808233389,0.8838473672,0.8858652618,0.8900872045,0.8962032016,0.9011236569,0.9056597036,0.9081034419,0.9137927041,0.9122599783,0.9167377677,0.9185976446,0.918625094,0.9194808955,0.9196973359,0.9183667734,0.9191361152,0.9175613943,0.9160321088,0.9145347199,0.912264488,0.9088971737,0.9111924347,0.9118767022,0.9104235719,0.9074521332,0.9062832584,0.905640278,0.9060342814,0.9037691126,0.9032538291,0.9056672678,0.9038486395,0.9032665469,0.902478796,0.902713895,0.9012556355,0.8997742789,0.902635305,0.9089542187,0.9142771746,0.9147467419,0.9162079585,0.9148432321,0.9153202633,0.9161158498,0.9166355017,0.9169698159,0.9173398042,0.9191359797,0.9214434572,0.9207677296,0.9193575526,0.9192868295,0.919140297,0.9201065957,0.9224458309,0.9197071806,0.9162754525,0.9160084355,0.9103288529,0.9058264596,0.9013112458,0.8947395631,0.8858484307,0.8918713291,0.9045714539,0.9103700118,0.9101313962,0.9023339043,0.8955708875,0.8917968823,0.8933665886,0.8953393585,0.8959022175,0.8956421082,0.8895071248,0.87810591,0.8533613364,0.7881184034,0.7031881411,0.7206795915,0.7472100521,0.7776005543,0.7748824736,0.7399449689,0.703672271,0.6630215909,0.7423837995,0.7995484796,0.8251281577,0.8524490054,0.864284564,0.8671098064,0.8740607449,0.8777326311,0.8822677857,0.8843802018,0.886537583,0.8879711313,0.8885777127,0.8867034183,0.8851721079,0.8809016205,0.8779515846,0.8753361199,0.8649081852,0.8556839069,0.8458926189,0.8321500901,0.7608203156,0.7234831449,0.7040747841,0.6909603034,0.7222795638,0.7614125902,0.7954943522,0.8245976726,0.8448368367,0.8527505308,0.852072737,0.8471325343,0.8409057297,0.8331210344,0.8219010816,0.8019165586,0.78782092,0.7762354534,0.7681507071,0.7653376052,0.7637775636,0.7600766547,0.7520027448,0.7451563213,0.7389627647,0.7298785044,0.7136690526,0.6954863234,0.6858448977,0.6818043999,0.6710084038,0.6573734956,0.6486102676,0.6417154612,0.6362321312,0.6285565677,0.619201979,0.6097624256,0.5994544985,0.5784436877,0.5381189477,0.4881457771,0.443300446,0.4175719773,0.4133990115,0.4266389763,0.4578610371,0.4923009168,0.4991989395,0.5250403133,0.584794102,0.6465146892,0.6802699554,0.689518347,0.6893551074,0.679741608,0.6615253536,0.6153555499,0.5469734667,0.5129175284,0.5271476755,0.5614127039,0.5885739336,0.588089237,0.5568899929,0.4996226227,0.4618099535,0.4764107367,0.4402917178,0.4348830465,0.4027196024,0.4047684997,0.3551236677,0.3558845756,0.3415793056,0.3433516941,0.332206415,0.3075104689])
	#diorite
	p[1+(3<<8)] = Material(0.0,410,10,[0.3409125721,0.3520419829,0.3605025857,0.3696156426,0.3802396013,0.391318121,0.3989647583,0.4055667572,0.4131391853,0.4223740244,0.433203587,0.4433805334,0.4542273128,0.462395745,0.4689634445,0.4774397082,0.4843733248,0.4900636473,0.4954397114,0.500826004,0.5058948384,0.5103621642,0.5150359008,0.5199759273,0.5248544004,0.5297070181,0.5330247549,0.5377165235,0.5414306201,0.5454484918,0.5502647392,0.5533433669,0.5576962401,0.5617397575,0.5652865622,0.5701663699,0.5729211589,0.5749111162,0.5766469414,0.5805437516,0.5827238486,0.5853784292,0.5865262531,0.5892324026,0.5913331477,0.590892737,0.5890638865,0.5907757778,0.5924527152,0.5930770078,0.5926725311,0.5926318077,0.5918590376,0.593757868,0.5935992484,0.5941284994,0.597483066,0.5976897452,0.5969893594,0.5969789214,0.5975113819,0.5997314194,0.5997001999,0.6000168299,0.6011866578,0.6007446696,0.6020349013,0.6030972372,0.6032866286,0.6034310379,0.6048399809,0.6054048411,0.6055819114,0.605555602,0.6051956057,0.6049512806,0.6054903795,0.6057604621,0.6078507606,0.6063238641,0.6065980412,0.6068375703,0.6060268995,0.6060230325,0.6052518181,0.6059441124,0.6059519638,0.6054899128,0.6050099999,0.6051014427,0.6056758061,0.605021695,0.6041947712,0.6038142897,0.603138478,0.6030766984,0.6033964049,0.6008338543,0.5984073942,0.5938745761,0.5913648796,0.5941009797,0.5975344573,0.5985823042,0.5985933504,0.598400643,0.5975738429,0.596376313,0.596146188,0.595734894,0.5934554838,0.5908191461,0.5883079868,0.5835706257,0.579003659,0.577758742,0.5785937671,0.5795169308,0.582554849,0.5844184523,0.585036424,0.5851990573,0.5851996084,0.5851942663,0.5859725397,0.5861784426,0.5866313234,0.5871147535,0.5894867941,0.5900924676,0.5894539559,0.5883323263,0.5881688884,0.5872270404,0.5871757686,0.587798377,0.5872052031,0.5868595347,0.5857559281,0.584213047,0.5831639007,0.5822932482,0.5811679185,0.5798111552,0.579320902,0.5785500786,0.5757050649,0.5666318037,0.5563223164,0.5482072091,0.5464616238,0.5476363593,0.5474352235,0.5448473403,0.5421562312,0.537919057,0.531195441,0.5207358113,0.5033981038,0.482653249,0.4679766065,0.4651640202,0.4640372719,0.4620791108,0.4608868042,0.459763998,0.4534039651,0.4442090117,0.4324176337,0.4149073548,0.4044781353,0.4018810663,0.4042366742,0.4089786181,0.4162783528,0.4243713561,0.4328402561,0.4416416985,0.4452032688,0.4531091586,0.4599794487,0.464684324,0.4737299852,0.480403059,0.4860422185,0.4919141678,0.500812231,0.5085886217,0.5152277503,0.5150776439,0.5162905814,0.5178647455,0.5197033779,0.5206374299,0.5220492365,0.523267704,0.5274912806,0.5275640571,0.5267226317,0.5266684015,0.5255411135,0.525080711,0.5215353619,0.5205787555,0.5129793073,0.5119543361,0.5038063076,0.5060782495,0.5044002165,0.4975105483])
	#andesite
	p[1+5<<8] = Material(0.9,410,10,[0.8686122357,0.8874062921,0.8992330125,0.9096413178,0.920347704,0.9244027317,0.9290763933,0.9332296698,0.9363626696,0.9373014112,0.9384262255,0.9355507434,0.9413015304,0.9424642185,0.9404497423,0.9423729356,0.9429291307,0.9430055376,0.9450541352,0.9466293482,0.9447093139,0.9437507168,0.9457397289,0.9451850544,0.9457170391,0.944963678,0.9453639456,0.9473366369,0.9472086994,0.9487052813,0.9489124402,0.9487735464,0.951296447,0.951016894,0.9538380404,0.9550983539,0.950932894,0.9542315605,0.9506978725,0.9559841529,0.958384745,0.9557627503,0.9580433609,0.961031631,0.9585372152,0.9591834023,0.9595348965,0.9594433164,0.9567703292,0.9582151259,0.9563777649,0.9553408605,0.9543358873,0.9564837683,0.9581088897,0.959472749,0.959382859,0.9603342268,0.9590551199,0.9594434133,0.9653100718,0.9636399017,0.9648361742,0.9645099228,0.9625675735,0.9636411964,0.964952886,0.9647892991,0.9648758742,0.9652038585,0.9650040039,0.9654246495,0.966173909,0.9635397732,0.9648252921,0.9666026424,0.9648531587,0.958562692,0.9627453011,0.9630781774,0.9626237143,0.9639273474,0.9621858474,0.9636638364,0.9632384545,0.9626065095,0.9627822042,0.9630353607,0.9618601043,0.9607256687,0.9617079186,0.962641995,0.9618954044,0.9615058201,0.9605507543,0.9614666479,0.9604598608,0.9598903557,0.9602813996,0.9611523523,0.9589802605,0.9599222371,0.9595956637,0.9602928686,0.9612276416,0.9560537917,0.9582669591,0.9619011931,0.9611790689,0.9604841901,0.9613854709,0.9612233625,0.9609952026,0.9612238056,0.960244984,0.9587246187,0.9571663527,0.9575730977,0.9601541154,0.9613966165,0.9605572853,0.9595156948,0.9584403209,0.9575925531,0.9563525355,0.954821145,0.9551883945,0.9559684665,0.9515123972,0.9489957209,0.9453169047,0.9406654095,0.9405010773,0.9385888636,0.9377559902,0.9386806153,0.950228034,0.9516290536,0.9491988895,0.9471287435,0.9454454638,0.9404754482,0.9325456124,0.9228765564,0.914225434,0.9060925178,0.8859455984,0.889470526,0.9170606289,0.9296902341,0.9313414775,0.9291855418,0.9262260559,0.9230708963,0.9157354311,0.9043312346,0.8959002079,0.8869608965,0.8730077307,0.881100876,0.9056187529,0.9249862606,0.9345549725,0.9404711266,0.9414618849,0.9429201738,0.9411100181,0.9391239112,0.9357779116,0.9273760222,0.9220042571,0.9168143102,0.9092324708,0.8883868491,0.8718934619,0.8696318918,0.8805039663,0.891561542,0.8914972271,0.884133166,0.873278158,0.861414392,0.8433527602,0.820582489,0.7969650068,0.7685318469,0.7385018481,0.7028274261,0.6678319248,0.6515411141,0.6340464319,0.608964575,0.5813944573,0.5840773231,0.637611468,0.7215678325,0.7954862233,0.8268788943,0.8264126335,0.8286956292,0.8189211633,0.8123120124,0.7859126531,0.7736952718,0.6925260521,0.6752483979,0.5686837427,0.6017486855,0.5842841255,0.4976674258])
	#grass
	p[2] = Material(0.0,410,10,[0.6424888463,0.6560452481,0.6656839271,0.6763544817,0.6887203122,0.6992529823,0.7057347564,0.7101884373,0.7178353497,0.7229289515,0.7328237981,0.7396926222,0.7429797411,0.7489349614,0.7528030866,0.7574746994,0.7604818417,0.7635026183,0.7652525333,0.7644869105,0.7650739689,0.7647947035,0.7676176307,0.7698832347,0.7686627505,0.7697450096,0.770690027,0.7708297917,0.7702419895,0.7721618163,0.7716490561,0.7745043116,0.7768565962,0.7794236156,0.7760145424,0.7841712308,0.7838117417,0.7879067965,0.7872672694,0.7924588174,0.7932303814,0.7917715742,0.7924803471,0.7941065571,0.7954766726,0.7935168354,0.7891952409,0.7891803724,0.7910100459,0.7914494646,0.7909514374,0.7848922775,0.7838548731,0.776293062,0.7691336074,0.7644066852,0.7796527674,0.7834797663,0.7842140104,0.7842220336,0.7844347541,0.7844177115,0.7830227883,0.7838030578,0.7872291269,0.7844658551,0.7839114976,0.7835766051,0.783927802,0.7839654151,0.7831798229,0.783308838,0.7840700707,0.7853478157,0.7845924934,0.7838892329,0.7832588366,0.7834865387,0.7844918436,0.7822118507,0.7806538575,0.7776475485,0.765946291,0.7595219519,0.7697849708,0.7712877764,0.7700638698,0.7572132492,0.7397286179,0.7249088088,0.7154667363,0.7069281681,0.7001303339,0.688423995,0.6524885701,0.6414021645,0.624544216,0.5625430648,0.4938788264,0.4969480923,0.5423095257,0.648695565,0.7213440377,0.7408905497,0.7449249408,0.7533554896,0.7632970398,0.7693237238,0.7746753947,0.780563414,0.7804548874,0.7830042394,0.7878574471,0.788324926,0.7888244335,0.7892938452,0.7899290829,0.790212609,0.7930753187,0.7933544043,0.7947561829,0.7947727963,0.7939827863,0.7920904282,0.7922501119,0.7923214976,0.7904694409,0.7869619492,0.7864498082,0.782618047,0.7793092162,0.7778686606,0.7698574035,0.7677917347,0.7662192329,0.762196513,0.7408902212,0.7319332658,0.7260102673,0.7189018058,0.7106825526,0.7044249196,0.7075366391,0.7096774148,0.7125242975,0.7244740263,0.7214263151,0.6900083112,0.6682381388,0.647088791,0.6310782707,0.6282476627,0.6287091362,0.6299231137,0.6336461354,0.638011142,0.6409171804,0.6437664596,0.6422932351,0.638064512,0.6337541636,0.6319460863,0.6263696344,0.6186818343,0.6124865357,0.601253886,0.5834967454,0.5679759349,0.556758182,0.5460512432,0.5270688736,0.5090004371,0.4845180552,0.4360313137,0.3774353681,0.3481832648,0.3522477863,0.3559187854,0.3372046201,0.3069410987,0.3344355375,0.4051050677,0.4365278792,0.4377730786,0.4360077897,0.4265485597,0.4109231458,0.3961176281,0.3816513194,0.3726715272,0.3608879278,0.3556557988,0.3577301025,0.3525067755,0.3404776269,0.3343496832,0.323708097,0.3180086361,0.3217300446,0.3186061372,0.32526882,0.3205979441,0.3122519954,0.3102705309,0.2782917402,0.2760534298,0.2518869075,0.2579319332,0.2537045982,0.2358383578])
	#wood
	p[5] = Material(0.0,410,10,[0.2441838253,0.2436116933,0.2522610077,0.2835760556,0.3326346647,0.3937130521,0.4231005982,0.4432550929,0.4631057814,0.4776832886,0.4867853332,0.4976951199,0.5077575857,0.5159889875,0.5212915585,0.5294511286,0.5363195923,0.5427253111,0.5510902391,0.5591389412,0.5670652743,0.5745343759,0.5820306474,0.5909146441,0.5988674636,0.6053692535,0.6121742336,0.6205321929,0.6267665867,0.6321558136,0.6391396505,0.6430243878,0.6487476535,0.6534491303,0.6548240329,0.6591023272,0.6614416597,0.6616553274,0.6623335223,0.6619505911,0.6624214048,0.6608804811,0.6600638754,0.6583253428,0.6560372262,0.653409349,0.6514383997,0.6511342924,0.6515735614,0.651581458,0.6516043594,0.6510568902,0.6521817399,0.6557693351,0.6568086267,0.6568791458,0.6631124756,0.6652642467,0.6702104424,0.6709021678,0.6730780118,0.674303451,0.6747696748,0.6753423756,0.6781340431,0.679221974,0.6804682544,0.6834781475,0.6843926076,0.6854691909,0.688023141,0.6915022413,0.6927929477,0.6943072276,0.6974889633,0.6988555947,0.7017810058,0.705304491,0.7090895307,0.7118833535,0.7150897318,0.7180811369,0.7211145278,0.7248473081,0.7259604656,0.7314681268,0.7337161397,0.7355086456,0.7347631841,0.7344213221,0.7349991726,0.7373665741,0.7411208474,0.745521622,0.7478585029,0.7442695727,0.7366078404,0.720854007,0.63559957,0.5317282208,0.5214983423,0.618733676,0.7115874463,0.7503616585,0.7577911295,0.762566892,0.770116923,0.7728045301,0.7751543076,0.7792211062,0.7808493868,0.7827555004,0.7857064554,0.7871547518,0.7900917684,0.7916910419,0.7922721546,0.7930642141,0.7948827193,0.7953977824,0.7962592058,0.797179655,0.7977193692,0.797658784,0.7978579249,0.7976712558,0.7975964095,0.7980257376,0.7988091296,0.8011670274,0.8012424258,0.7992396214,0.7985473737,0.7999145848,0.8000821761,0.7983691833,0.7980211553,0.798603233,0.7981483031,0.796871155,0.7951050665,0.7917097426,0.7866768969,0.781593558,0.7805104364,0.7839455064,0.7852587919,0.7750024961,0.7654286113,0.7540892485,0.7459170207,0.7434190381,0.7439164723,0.7465512922,0.7481103622,0.7500121313,0.7507497669,0.7522953052,0.7523930588,0.7536338792,0.7561323819,0.7566864646,0.7569120744,0.7559057743,0.7534993081,0.7499992758,0.7460247124,0.7392699078,0.7223031644,0.7013551322,0.6832816378,0.6746851235,0.6739925552,0.6697547218,0.6519378166,0.6186993893,0.565917123,0.491188597,0.4202490806,0.3905685488,0.4148352969,0.4707130306,0.5216664545,0.5552059355,0.5785212474,0.5953284663,0.6045896986,0.6047811737,0.5914850319,0.5662691903,0.5313188375,0.4950498965,0.4641735514,0.4421034907,0.4364689281,0.4448753205,0.4509988349,0.4514882624,0.4509248734,0.4482555739,0.4409309697,0.4417214192,0.4185507179,0.4233296924,0.4142707208,0.4201893027,0.4423218874,0.4334379312,0.4398388693,0.4664671659])
	#leaves
	p[18] = Material(0.7,410,10,[0.4478947524,0.4596348428,0.467813989,0.4761086795,0.4846813752,0.4929987243,0.4974967654,0.5026141066,0.507838324,0.515153453,0.5228743419,0.5299410458,0.5374751671,0.5446193639,0.5497428082,0.5560254088,0.5608975893,0.5659382711,0.569945366,0.5726683462,0.5749374732,0.5775141438,0.5799447832,0.5826857715,0.5854830361,0.5883998549,0.5900958085,0.5934794576,0.5983789082,0.6042882168,0.6088346356,0.6128979519,0.6168696759,0.6213736225,0.6243031303,0.6310017687,0.6336409879,0.6373138165,0.6402280947,0.6449544595,0.6484894729,0.6513596421,0.653445276,0.6591301269,0.6629490596,0.6659454751,0.6679220069,0.6691838856,0.6704430701,0.6705008792,0.6707143438,0.6719218808,0.6732840084,0.6755447677,0.6770748059,0.678263718,0.6793942042,0.679914749,0.6829369738,0.6833925508,0.6854476844,0.688800773,0.6897352999,0.690018202,0.6914179469,0.6923183125,0.6933390956,0.6950989585,0.6962582822,0.6962828233,0.6972861732,0.698786204,0.6998002909,0.6993217528,0.6992286545,0.6994475073,0.6990547289,0.6995922876,0.7020101249,0.7019198439,0.7027256817,0.7029520014,0.7032497522,0.702704353,0.7010580054,0.7021182367,0.7015716952,0.701984486,0.7018861099,0.7015585331,0.7013350362,0.6997967028,0.6974836188,0.6950131481,0.6917669774,0.6878306427,0.6808789802,0.6679368636,0.648698757,0.6256591723,0.6078237279,0.6042066013,0.6099116626,0.6168915786,0.6192597952,0.6213007599,0.6246947365,0.6275175065,0.6324330854,0.6362009132,0.639074462,0.6427280915,0.645624889,0.6493516718,0.6533800952,0.6549193834,0.6557211733,0.6565198325,0.6584984658,0.6592028351,0.6611092759,0.6609015703,0.659760785,0.6612141949,0.6618595452,0.6622665486,0.6618502432,0.6607922131,0.6622188989,0.6616277533,0.6604103647,0.6597035681,0.6592249793,0.6580865075,0.6565871168,0.6551563143,0.6533948162,0.6538354931,0.6529478476,0.6514196439,0.6505900691,0.6489972329,0.6487218351,0.647342794,0.645338697,0.6423723949,0.6315584642,0.5879621515,0.5524385547,0.5184140668,0.4989198771,0.4945014675,0.4978448607,0.5043466473,0.512889385,0.5229053851,0.533104206,0.5439215053,0.5544425548,0.5641047374,0.5718826064,0.5780425898,0.5827877044,0.5868781561,0.5894081236,0.5912009837,0.5913730535,0.5910337565,0.5917287123,0.5919349082,0.591211877,0.5900380972,0.5873783097,0.5823453541,0.5731797015,0.5595682178,0.5408803777,0.5176947086,0.4963003603,0.4818604415,0.4741639939,0.4715423238,0.4710006238,0.4698786906,0.4692060911,0.4703373113,0.4721943116,0.4755571515,0.478115772,0.4796796846,0.4852572873,0.4924800115,0.4972103132,0.4998802729,0.5010602256,0.5021721432,0.5022153781,0.4977901483,0.4934331525,0.4934347707,0.4842724792,0.4845452373,0.4663396678,0.4628941837,0.4380171734,0.4339307675,0.404778744,0.4132704512,0.4082386533,0.3849204909])
	return p

